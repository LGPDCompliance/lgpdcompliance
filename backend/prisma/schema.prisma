generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  name  String
  email String @unique
  role  Role   @default(USER)


  userRegister   UserRegister @relation(fields: [userRegisterId], references: [id])
  userRegisterId String       @unique

  quizAnswers QuizAnswer[]

  @@map("users")
}

model UserRegister {
  id        String            @id @default(uuid())
  status    UserAccountStatus @default(ACTIVE)
  createdAt DateTime          @default(now())

  user           User?
  authentication Authentication?
  @@map("userRegisters")
}

model Authentication {
  id       String @id @default(uuid())
  email    String @unique
  password String

  userRegister   UserRegister @relation(fields: [userRegisterId], references: [id])
  userRegisterId String       @unique
  @@map("authentications")
}

model Quiz {

  id          String       @id @default(uuid())
  questions   Question[]
  quizAnswers QuizAnswer[]
  maxScore    Float        @default(0)

  sections Section[]

  @@map("quizes")
}

model Question {

  id    String @id @default(uuid())
  title String @db.Text

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String

  alternatives Alternative[]
  answers      QuestionAnswer[]

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId Int?
  @@map("questions")
}

model Section {
  id           Int           @id @default(autoincrement())
  title        String
  
  questions    Question[]
  feedbacks    Feedback[]

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String
}

model Feedback {
  id          String @id @default(uuid())
  description String @db.Text

  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  alternativeId String      @unique

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId Int?

  @@map("feedbacks")
}

model Alternative {

  id    String @id @default(uuid())
  title String
  score Float

  question   Question         @relation(fields: [questionId], references: [id])
  questionId String
  answers    QuestionAnswer[]

  feedback Feedback?

  @@map("alternatives")
}

model QuizAnswer {
  id String @id @default(uuid())

  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  adequance Adequance
  answers   QuestionAnswer[]
  score     Float

  createdAt DateTime @default(now())

  @@map("quizAnswers")
}

model QuestionAnswer {

  id    String @id @default(uuid())
  score Float

  quizAnswer   QuizAnswer @relation(fields: [quizAnswerId], references: [id])
  quizAnswerId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  alternativeId String

  @@map("questionAnswers")
}

enum UserAccountStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum Role {
  USER
  ADMIN
}

enum Adequance {
  STARTER
  BASIC
  INTERMEDIATE
  IMPROVEMENT
  ENHANCED
}
